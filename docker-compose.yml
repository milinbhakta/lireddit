# Docker compose to run all the services and application both server and web
version: "3.7"

services:
  postgres:
    image: postgres:12.1-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.5-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    environment:
      - "discovery.type=single-node"
    ports:
      - 9200:9200
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    build: ./server/src/elasticsearch
    ports:
      - 9600:9600
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://logstash:9600"]
      interval: 30s
      timeout: 10s
      retries: 5

  server:
    build: ./server
    ports:
      - "4000:4000"
    volumes:
      - ./server:/app
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PORT=4000
      - SESSION_SECRET=qowiueojwojfalksdjoqiwueo
      - CORS_ORIGIN=http://localhost:3000
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://server:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build: ./web
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
    depends_on:
      - server
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
