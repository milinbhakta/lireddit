# Docker compose to run all the services and application both server and web
version: "3.9"

services:
  rabbitmq:
    build: ./rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    build: ./postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.5-alpine
    environment:
      - "vm.overcommit_memory=1"
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - ./redis/data:/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 5s
      timeout: 5s
      retries: 5

  logstash:
    build: ./logstash
    ports:
      - 9600:9600
    environment:
      - CONFIG_SUPPORT_ESCAPE=true
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    depends_on:
      - elasticsearch
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://logstash:9600"]
      interval: 5s
      timeout: 5s
      retries: 5

  server:
    build: ./server
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./server:/app
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      elasticsearch:
        condition: service_healthy
        restart: true
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      PORT: ${SERVER_PORT}
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    restart: always

  web:
    build: ./web
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    volumes:
      - ./web:/app
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SERVER_URL=${NEXT_PUBLIC_SERVER_URL}
    depends_on:
      - server
    restart: always